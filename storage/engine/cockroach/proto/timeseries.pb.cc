// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cockroach/proto/timeseries.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "cockroach/proto/timeseries.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace cockroach {
namespace proto {

namespace {

const ::google::protobuf::Descriptor* TimeSeriesDatapoint_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TimeSeriesDatapoint_reflection_ = NULL;
const ::google::protobuf::Descriptor* TimeSeriesData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TimeSeriesData_reflection_ = NULL;
const ::google::protobuf::Descriptor* TimeSeriesQueryRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TimeSeriesQueryRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* TimeSeriesQueryRequest_Query_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TimeSeriesQueryRequest_Query_reflection_ = NULL;
const ::google::protobuf::Descriptor* TimeSeriesQueryResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TimeSeriesQueryResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* TimeSeriesQueryResponse_Result_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TimeSeriesQueryResponse_Result_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_cockroach_2fproto_2ftimeseries_2eproto() {
  protobuf_AddDesc_cockroach_2fproto_2ftimeseries_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "cockroach/proto/timeseries.proto");
  GOOGLE_CHECK(file != NULL);
  TimeSeriesDatapoint_descriptor_ = file->message_type(0);
  static const int TimeSeriesDatapoint_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TimeSeriesDatapoint, timestamp_nanos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TimeSeriesDatapoint, value_),
  };
  TimeSeriesDatapoint_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TimeSeriesDatapoint_descriptor_,
      TimeSeriesDatapoint::default_instance_,
      TimeSeriesDatapoint_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TimeSeriesDatapoint, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TimeSeriesDatapoint, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TimeSeriesDatapoint));
  TimeSeriesData_descriptor_ = file->message_type(1);
  static const int TimeSeriesData_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TimeSeriesData, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TimeSeriesData, source_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TimeSeriesData, datapoints_),
  };
  TimeSeriesData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TimeSeriesData_descriptor_,
      TimeSeriesData::default_instance_,
      TimeSeriesData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TimeSeriesData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TimeSeriesData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TimeSeriesData));
  TimeSeriesQueryRequest_descriptor_ = file->message_type(2);
  static const int TimeSeriesQueryRequest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TimeSeriesQueryRequest, start_nanos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TimeSeriesQueryRequest, end_nanos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TimeSeriesQueryRequest, queries_),
  };
  TimeSeriesQueryRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TimeSeriesQueryRequest_descriptor_,
      TimeSeriesQueryRequest::default_instance_,
      TimeSeriesQueryRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TimeSeriesQueryRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TimeSeriesQueryRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TimeSeriesQueryRequest));
  TimeSeriesQueryRequest_Query_descriptor_ = TimeSeriesQueryRequest_descriptor_->nested_type(0);
  static const int TimeSeriesQueryRequest_Query_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TimeSeriesQueryRequest_Query, name_),
  };
  TimeSeriesQueryRequest_Query_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TimeSeriesQueryRequest_Query_descriptor_,
      TimeSeriesQueryRequest_Query::default_instance_,
      TimeSeriesQueryRequest_Query_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TimeSeriesQueryRequest_Query, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TimeSeriesQueryRequest_Query, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TimeSeriesQueryRequest_Query));
  TimeSeriesQueryResponse_descriptor_ = file->message_type(3);
  static const int TimeSeriesQueryResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TimeSeriesQueryResponse, results_),
  };
  TimeSeriesQueryResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TimeSeriesQueryResponse_descriptor_,
      TimeSeriesQueryResponse::default_instance_,
      TimeSeriesQueryResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TimeSeriesQueryResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TimeSeriesQueryResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TimeSeriesQueryResponse));
  TimeSeriesQueryResponse_Result_descriptor_ = TimeSeriesQueryResponse_descriptor_->nested_type(0);
  static const int TimeSeriesQueryResponse_Result_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TimeSeriesQueryResponse_Result, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TimeSeriesQueryResponse_Result, sources_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TimeSeriesQueryResponse_Result, datapoints_),
  };
  TimeSeriesQueryResponse_Result_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TimeSeriesQueryResponse_Result_descriptor_,
      TimeSeriesQueryResponse_Result::default_instance_,
      TimeSeriesQueryResponse_Result_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TimeSeriesQueryResponse_Result, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TimeSeriesQueryResponse_Result, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TimeSeriesQueryResponse_Result));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_cockroach_2fproto_2ftimeseries_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TimeSeriesDatapoint_descriptor_, &TimeSeriesDatapoint::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TimeSeriesData_descriptor_, &TimeSeriesData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TimeSeriesQueryRequest_descriptor_, &TimeSeriesQueryRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TimeSeriesQueryRequest_Query_descriptor_, &TimeSeriesQueryRequest_Query::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TimeSeriesQueryResponse_descriptor_, &TimeSeriesQueryResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TimeSeriesQueryResponse_Result_descriptor_, &TimeSeriesQueryResponse_Result::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_cockroach_2fproto_2ftimeseries_2eproto() {
  delete TimeSeriesDatapoint::default_instance_;
  delete TimeSeriesDatapoint_reflection_;
  delete TimeSeriesData::default_instance_;
  delete TimeSeriesData_reflection_;
  delete TimeSeriesQueryRequest::default_instance_;
  delete TimeSeriesQueryRequest_reflection_;
  delete TimeSeriesQueryRequest_Query::default_instance_;
  delete TimeSeriesQueryRequest_Query_reflection_;
  delete TimeSeriesQueryResponse::default_instance_;
  delete TimeSeriesQueryResponse_reflection_;
  delete TimeSeriesQueryResponse_Result::default_instance_;
  delete TimeSeriesQueryResponse_Result_reflection_;
}

void protobuf_AddDesc_cockroach_2fproto_2ftimeseries_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::gogoproto::protobuf_AddDesc_gogoproto_2fgogo_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n cockroach/proto/timeseries.proto\022\017cock"
    "roach.proto\032\024gogoproto/gogo.proto\"I\n\023Tim"
    "eSeriesDatapoint\022\035\n\017timestamp_nanos\030\001 \001("
    "\003B\004\310\336\037\000\022\023\n\005value\030\002 \001(\001B\004\310\336\037\000\"t\n\016TimeSeri"
    "esData\022\022\n\004name\030\001 \001(\tB\004\310\336\037\000\022\024\n\006source\030\002 \001"
    "(\tB\004\310\336\037\000\0228\n\ndatapoints\030\003 \003(\0132$.cockroach"
    ".proto.TimeSeriesDatapoint\"\257\001\n\026TimeSerie"
    "sQueryRequest\022\031\n\013start_nanos\030\001 \001(\003B\004\310\336\037\000"
    "\022\027\n\tend_nanos\030\002 \001(\003B\004\310\336\037\000\022D\n\007queries\030\003 \003"
    "(\0132-.cockroach.proto.TimeSeriesQueryRequ"
    "est.QueryB\004\310\336\037\000\032\033\n\005Query\022\022\n\004name\030\001 \001(\tB\004"
    "\310\336\037\000\"\312\001\n\027TimeSeriesQueryResponse\022@\n\007resu"
    "lts\030\001 \003(\0132/.cockroach.proto.TimeSeriesQu"
    "eryResponse.Result\032m\n\006Result\022\022\n\004name\030\001 \001"
    "(\tB\004\310\336\037\000\022\025\n\007sources\030\002 \003(\tB\004\310\336\037\000\0228\n\ndatap"
    "oints\030\003 \003(\0132$.cockroach.proto.TimeSeries"
    "DatapointB\007Z\005proto", 658);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "cockroach/proto/timeseries.proto", &protobuf_RegisterTypes);
  TimeSeriesDatapoint::default_instance_ = new TimeSeriesDatapoint();
  TimeSeriesData::default_instance_ = new TimeSeriesData();
  TimeSeriesQueryRequest::default_instance_ = new TimeSeriesQueryRequest();
  TimeSeriesQueryRequest_Query::default_instance_ = new TimeSeriesQueryRequest_Query();
  TimeSeriesQueryResponse::default_instance_ = new TimeSeriesQueryResponse();
  TimeSeriesQueryResponse_Result::default_instance_ = new TimeSeriesQueryResponse_Result();
  TimeSeriesDatapoint::default_instance_->InitAsDefaultInstance();
  TimeSeriesData::default_instance_->InitAsDefaultInstance();
  TimeSeriesQueryRequest::default_instance_->InitAsDefaultInstance();
  TimeSeriesQueryRequest_Query::default_instance_->InitAsDefaultInstance();
  TimeSeriesQueryResponse::default_instance_->InitAsDefaultInstance();
  TimeSeriesQueryResponse_Result::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_cockroach_2fproto_2ftimeseries_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_cockroach_2fproto_2ftimeseries_2eproto {
  StaticDescriptorInitializer_cockroach_2fproto_2ftimeseries_2eproto() {
    protobuf_AddDesc_cockroach_2fproto_2ftimeseries_2eproto();
  }
} static_descriptor_initializer_cockroach_2fproto_2ftimeseries_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int TimeSeriesDatapoint::kTimestampNanosFieldNumber;
const int TimeSeriesDatapoint::kValueFieldNumber;
#endif  // !_MSC_VER

TimeSeriesDatapoint::TimeSeriesDatapoint()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cockroach.proto.TimeSeriesDatapoint)
}

void TimeSeriesDatapoint::InitAsDefaultInstance() {
}

TimeSeriesDatapoint::TimeSeriesDatapoint(const TimeSeriesDatapoint& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:cockroach.proto.TimeSeriesDatapoint)
}

void TimeSeriesDatapoint::SharedCtor() {
  _cached_size_ = 0;
  timestamp_nanos_ = GOOGLE_LONGLONG(0);
  value_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TimeSeriesDatapoint::~TimeSeriesDatapoint() {
  // @@protoc_insertion_point(destructor:cockroach.proto.TimeSeriesDatapoint)
  SharedDtor();
}

void TimeSeriesDatapoint::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TimeSeriesDatapoint::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TimeSeriesDatapoint::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TimeSeriesDatapoint_descriptor_;
}

const TimeSeriesDatapoint& TimeSeriesDatapoint::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cockroach_2fproto_2ftimeseries_2eproto();
  return *default_instance_;
}

TimeSeriesDatapoint* TimeSeriesDatapoint::default_instance_ = NULL;

TimeSeriesDatapoint* TimeSeriesDatapoint::New() const {
  return new TimeSeriesDatapoint;
}

void TimeSeriesDatapoint::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TimeSeriesDatapoint*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(timestamp_nanos_, value_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TimeSeriesDatapoint::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cockroach.proto.TimeSeriesDatapoint)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 timestamp_nanos = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &timestamp_nanos_)));
          set_has_timestamp_nanos();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_value;
        break;
      }

      // optional double value = 2;
      case 2: {
        if (tag == 17) {
         parse_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &value_)));
          set_has_value();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cockroach.proto.TimeSeriesDatapoint)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cockroach.proto.TimeSeriesDatapoint)
  return false;
#undef DO_
}

void TimeSeriesDatapoint::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cockroach.proto.TimeSeriesDatapoint)
  // optional int64 timestamp_nanos = 1;
  if (has_timestamp_nanos()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->timestamp_nanos(), output);
  }

  // optional double value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:cockroach.proto.TimeSeriesDatapoint)
}

::google::protobuf::uint8* TimeSeriesDatapoint::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:cockroach.proto.TimeSeriesDatapoint)
  // optional int64 timestamp_nanos = 1;
  if (has_timestamp_nanos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->timestamp_nanos(), target);
  }

  // optional double value = 2;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cockroach.proto.TimeSeriesDatapoint)
  return target;
}

int TimeSeriesDatapoint::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 timestamp_nanos = 1;
    if (has_timestamp_nanos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->timestamp_nanos());
    }

    // optional double value = 2;
    if (has_value()) {
      total_size += 1 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TimeSeriesDatapoint::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TimeSeriesDatapoint* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TimeSeriesDatapoint*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TimeSeriesDatapoint::MergeFrom(const TimeSeriesDatapoint& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_timestamp_nanos()) {
      set_timestamp_nanos(from.timestamp_nanos());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TimeSeriesDatapoint::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TimeSeriesDatapoint::CopyFrom(const TimeSeriesDatapoint& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TimeSeriesDatapoint::IsInitialized() const {

  return true;
}

void TimeSeriesDatapoint::Swap(TimeSeriesDatapoint* other) {
  if (other != this) {
    std::swap(timestamp_nanos_, other->timestamp_nanos_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TimeSeriesDatapoint::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TimeSeriesDatapoint_descriptor_;
  metadata.reflection = TimeSeriesDatapoint_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TimeSeriesData::kNameFieldNumber;
const int TimeSeriesData::kSourceFieldNumber;
const int TimeSeriesData::kDatapointsFieldNumber;
#endif  // !_MSC_VER

TimeSeriesData::TimeSeriesData()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cockroach.proto.TimeSeriesData)
}

void TimeSeriesData::InitAsDefaultInstance() {
}

TimeSeriesData::TimeSeriesData(const TimeSeriesData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:cockroach.proto.TimeSeriesData)
}

void TimeSeriesData::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  source_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TimeSeriesData::~TimeSeriesData() {
  // @@protoc_insertion_point(destructor:cockroach.proto.TimeSeriesData)
  SharedDtor();
}

void TimeSeriesData::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (source_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete source_;
  }
  if (this != default_instance_) {
  }
}

void TimeSeriesData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TimeSeriesData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TimeSeriesData_descriptor_;
}

const TimeSeriesData& TimeSeriesData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cockroach_2fproto_2ftimeseries_2eproto();
  return *default_instance_;
}

TimeSeriesData* TimeSeriesData::default_instance_ = NULL;

TimeSeriesData* TimeSeriesData::New() const {
  return new TimeSeriesData;
}

void TimeSeriesData::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
    if (has_source()) {
      if (source_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        source_->clear();
      }
    }
  }
  datapoints_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TimeSeriesData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cockroach.proto.TimeSeriesData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_source;
        break;
      }

      // optional string source = 2;
      case 2: {
        if (tag == 18) {
         parse_source:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_source()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->source().data(), this->source().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "source");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_datapoints;
        break;
      }

      // repeated .cockroach.proto.TimeSeriesDatapoint datapoints = 3;
      case 3: {
        if (tag == 26) {
         parse_datapoints:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_datapoints()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_datapoints;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cockroach.proto.TimeSeriesData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cockroach.proto.TimeSeriesData)
  return false;
#undef DO_
}

void TimeSeriesData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cockroach.proto.TimeSeriesData)
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // optional string source = 2;
  if (has_source()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->source().data(), this->source().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "source");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->source(), output);
  }

  // repeated .cockroach.proto.TimeSeriesDatapoint datapoints = 3;
  for (int i = 0; i < this->datapoints_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->datapoints(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:cockroach.proto.TimeSeriesData)
}

::google::protobuf::uint8* TimeSeriesData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:cockroach.proto.TimeSeriesData)
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional string source = 2;
  if (has_source()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->source().data(), this->source().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "source");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->source(), target);
  }

  // repeated .cockroach.proto.TimeSeriesDatapoint datapoints = 3;
  for (int i = 0; i < this->datapoints_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->datapoints(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cockroach.proto.TimeSeriesData)
  return target;
}

int TimeSeriesData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string source = 2;
    if (has_source()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->source());
    }

  }
  // repeated .cockroach.proto.TimeSeriesDatapoint datapoints = 3;
  total_size += 1 * this->datapoints_size();
  for (int i = 0; i < this->datapoints_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->datapoints(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TimeSeriesData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TimeSeriesData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TimeSeriesData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TimeSeriesData::MergeFrom(const TimeSeriesData& from) {
  GOOGLE_CHECK_NE(&from, this);
  datapoints_.MergeFrom(from.datapoints_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_source()) {
      set_source(from.source());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TimeSeriesData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TimeSeriesData::CopyFrom(const TimeSeriesData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TimeSeriesData::IsInitialized() const {

  return true;
}

void TimeSeriesData::Swap(TimeSeriesData* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(source_, other->source_);
    datapoints_.Swap(&other->datapoints_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TimeSeriesData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TimeSeriesData_descriptor_;
  metadata.reflection = TimeSeriesData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TimeSeriesQueryRequest_Query::kNameFieldNumber;
#endif  // !_MSC_VER

TimeSeriesQueryRequest_Query::TimeSeriesQueryRequest_Query()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cockroach.proto.TimeSeriesQueryRequest.Query)
}

void TimeSeriesQueryRequest_Query::InitAsDefaultInstance() {
}

TimeSeriesQueryRequest_Query::TimeSeriesQueryRequest_Query(const TimeSeriesQueryRequest_Query& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:cockroach.proto.TimeSeriesQueryRequest.Query)
}

void TimeSeriesQueryRequest_Query::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TimeSeriesQueryRequest_Query::~TimeSeriesQueryRequest_Query() {
  // @@protoc_insertion_point(destructor:cockroach.proto.TimeSeriesQueryRequest.Query)
  SharedDtor();
}

void TimeSeriesQueryRequest_Query::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void TimeSeriesQueryRequest_Query::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TimeSeriesQueryRequest_Query::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TimeSeriesQueryRequest_Query_descriptor_;
}

const TimeSeriesQueryRequest_Query& TimeSeriesQueryRequest_Query::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cockroach_2fproto_2ftimeseries_2eproto();
  return *default_instance_;
}

TimeSeriesQueryRequest_Query* TimeSeriesQueryRequest_Query::default_instance_ = NULL;

TimeSeriesQueryRequest_Query* TimeSeriesQueryRequest_Query::New() const {
  return new TimeSeriesQueryRequest_Query;
}

void TimeSeriesQueryRequest_Query::Clear() {
  if (has_name()) {
    if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      name_->clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TimeSeriesQueryRequest_Query::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cockroach.proto.TimeSeriesQueryRequest.Query)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cockroach.proto.TimeSeriesQueryRequest.Query)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cockroach.proto.TimeSeriesQueryRequest.Query)
  return false;
#undef DO_
}

void TimeSeriesQueryRequest_Query::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cockroach.proto.TimeSeriesQueryRequest.Query)
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:cockroach.proto.TimeSeriesQueryRequest.Query)
}

::google::protobuf::uint8* TimeSeriesQueryRequest_Query::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:cockroach.proto.TimeSeriesQueryRequest.Query)
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cockroach.proto.TimeSeriesQueryRequest.Query)
  return target;
}

int TimeSeriesQueryRequest_Query::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TimeSeriesQueryRequest_Query::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TimeSeriesQueryRequest_Query* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TimeSeriesQueryRequest_Query*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TimeSeriesQueryRequest_Query::MergeFrom(const TimeSeriesQueryRequest_Query& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TimeSeriesQueryRequest_Query::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TimeSeriesQueryRequest_Query::CopyFrom(const TimeSeriesQueryRequest_Query& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TimeSeriesQueryRequest_Query::IsInitialized() const {

  return true;
}

void TimeSeriesQueryRequest_Query::Swap(TimeSeriesQueryRequest_Query* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TimeSeriesQueryRequest_Query::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TimeSeriesQueryRequest_Query_descriptor_;
  metadata.reflection = TimeSeriesQueryRequest_Query_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int TimeSeriesQueryRequest::kStartNanosFieldNumber;
const int TimeSeriesQueryRequest::kEndNanosFieldNumber;
const int TimeSeriesQueryRequest::kQueriesFieldNumber;
#endif  // !_MSC_VER

TimeSeriesQueryRequest::TimeSeriesQueryRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cockroach.proto.TimeSeriesQueryRequest)
}

void TimeSeriesQueryRequest::InitAsDefaultInstance() {
}

TimeSeriesQueryRequest::TimeSeriesQueryRequest(const TimeSeriesQueryRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:cockroach.proto.TimeSeriesQueryRequest)
}

void TimeSeriesQueryRequest::SharedCtor() {
  _cached_size_ = 0;
  start_nanos_ = GOOGLE_LONGLONG(0);
  end_nanos_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TimeSeriesQueryRequest::~TimeSeriesQueryRequest() {
  // @@protoc_insertion_point(destructor:cockroach.proto.TimeSeriesQueryRequest)
  SharedDtor();
}

void TimeSeriesQueryRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TimeSeriesQueryRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TimeSeriesQueryRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TimeSeriesQueryRequest_descriptor_;
}

const TimeSeriesQueryRequest& TimeSeriesQueryRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cockroach_2fproto_2ftimeseries_2eproto();
  return *default_instance_;
}

TimeSeriesQueryRequest* TimeSeriesQueryRequest::default_instance_ = NULL;

TimeSeriesQueryRequest* TimeSeriesQueryRequest::New() const {
  return new TimeSeriesQueryRequest;
}

void TimeSeriesQueryRequest::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TimeSeriesQueryRequest*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(start_nanos_, end_nanos_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  queries_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TimeSeriesQueryRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cockroach.proto.TimeSeriesQueryRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 start_nanos = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &start_nanos_)));
          set_has_start_nanos();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_end_nanos;
        break;
      }

      // optional int64 end_nanos = 2;
      case 2: {
        if (tag == 16) {
         parse_end_nanos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &end_nanos_)));
          set_has_end_nanos();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_queries;
        break;
      }

      // repeated .cockroach.proto.TimeSeriesQueryRequest.Query queries = 3;
      case 3: {
        if (tag == 26) {
         parse_queries:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_queries()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_queries;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cockroach.proto.TimeSeriesQueryRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cockroach.proto.TimeSeriesQueryRequest)
  return false;
#undef DO_
}

void TimeSeriesQueryRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cockroach.proto.TimeSeriesQueryRequest)
  // optional int64 start_nanos = 1;
  if (has_start_nanos()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->start_nanos(), output);
  }

  // optional int64 end_nanos = 2;
  if (has_end_nanos()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->end_nanos(), output);
  }

  // repeated .cockroach.proto.TimeSeriesQueryRequest.Query queries = 3;
  for (int i = 0; i < this->queries_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->queries(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:cockroach.proto.TimeSeriesQueryRequest)
}

::google::protobuf::uint8* TimeSeriesQueryRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:cockroach.proto.TimeSeriesQueryRequest)
  // optional int64 start_nanos = 1;
  if (has_start_nanos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->start_nanos(), target);
  }

  // optional int64 end_nanos = 2;
  if (has_end_nanos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->end_nanos(), target);
  }

  // repeated .cockroach.proto.TimeSeriesQueryRequest.Query queries = 3;
  for (int i = 0; i < this->queries_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->queries(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cockroach.proto.TimeSeriesQueryRequest)
  return target;
}

int TimeSeriesQueryRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 start_nanos = 1;
    if (has_start_nanos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->start_nanos());
    }

    // optional int64 end_nanos = 2;
    if (has_end_nanos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->end_nanos());
    }

  }
  // repeated .cockroach.proto.TimeSeriesQueryRequest.Query queries = 3;
  total_size += 1 * this->queries_size();
  for (int i = 0; i < this->queries_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->queries(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TimeSeriesQueryRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TimeSeriesQueryRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TimeSeriesQueryRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TimeSeriesQueryRequest::MergeFrom(const TimeSeriesQueryRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  queries_.MergeFrom(from.queries_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_start_nanos()) {
      set_start_nanos(from.start_nanos());
    }
    if (from.has_end_nanos()) {
      set_end_nanos(from.end_nanos());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TimeSeriesQueryRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TimeSeriesQueryRequest::CopyFrom(const TimeSeriesQueryRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TimeSeriesQueryRequest::IsInitialized() const {

  return true;
}

void TimeSeriesQueryRequest::Swap(TimeSeriesQueryRequest* other) {
  if (other != this) {
    std::swap(start_nanos_, other->start_nanos_);
    std::swap(end_nanos_, other->end_nanos_);
    queries_.Swap(&other->queries_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TimeSeriesQueryRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TimeSeriesQueryRequest_descriptor_;
  metadata.reflection = TimeSeriesQueryRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TimeSeriesQueryResponse_Result::kNameFieldNumber;
const int TimeSeriesQueryResponse_Result::kSourcesFieldNumber;
const int TimeSeriesQueryResponse_Result::kDatapointsFieldNumber;
#endif  // !_MSC_VER

TimeSeriesQueryResponse_Result::TimeSeriesQueryResponse_Result()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cockroach.proto.TimeSeriesQueryResponse.Result)
}

void TimeSeriesQueryResponse_Result::InitAsDefaultInstance() {
}

TimeSeriesQueryResponse_Result::TimeSeriesQueryResponse_Result(const TimeSeriesQueryResponse_Result& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:cockroach.proto.TimeSeriesQueryResponse.Result)
}

void TimeSeriesQueryResponse_Result::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TimeSeriesQueryResponse_Result::~TimeSeriesQueryResponse_Result() {
  // @@protoc_insertion_point(destructor:cockroach.proto.TimeSeriesQueryResponse.Result)
  SharedDtor();
}

void TimeSeriesQueryResponse_Result::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void TimeSeriesQueryResponse_Result::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TimeSeriesQueryResponse_Result::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TimeSeriesQueryResponse_Result_descriptor_;
}

const TimeSeriesQueryResponse_Result& TimeSeriesQueryResponse_Result::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cockroach_2fproto_2ftimeseries_2eproto();
  return *default_instance_;
}

TimeSeriesQueryResponse_Result* TimeSeriesQueryResponse_Result::default_instance_ = NULL;

TimeSeriesQueryResponse_Result* TimeSeriesQueryResponse_Result::New() const {
  return new TimeSeriesQueryResponse_Result;
}

void TimeSeriesQueryResponse_Result::Clear() {
  if (has_name()) {
    if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      name_->clear();
    }
  }
  sources_.Clear();
  datapoints_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TimeSeriesQueryResponse_Result::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cockroach.proto.TimeSeriesQueryResponse.Result)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_sources;
        break;
      }

      // repeated string sources = 2;
      case 2: {
        if (tag == 18) {
         parse_sources:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_sources()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->sources(this->sources_size() - 1).data(),
            this->sources(this->sources_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "sources");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_sources;
        if (input->ExpectTag(26)) goto parse_datapoints;
        break;
      }

      // repeated .cockroach.proto.TimeSeriesDatapoint datapoints = 3;
      case 3: {
        if (tag == 26) {
         parse_datapoints:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_datapoints()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_datapoints;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cockroach.proto.TimeSeriesQueryResponse.Result)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cockroach.proto.TimeSeriesQueryResponse.Result)
  return false;
#undef DO_
}

void TimeSeriesQueryResponse_Result::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cockroach.proto.TimeSeriesQueryResponse.Result)
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // repeated string sources = 2;
  for (int i = 0; i < this->sources_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
    this->sources(i).data(), this->sources(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE,
    "sources");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->sources(i), output);
  }

  // repeated .cockroach.proto.TimeSeriesDatapoint datapoints = 3;
  for (int i = 0; i < this->datapoints_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->datapoints(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:cockroach.proto.TimeSeriesQueryResponse.Result)
}

::google::protobuf::uint8* TimeSeriesQueryResponse_Result::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:cockroach.proto.TimeSeriesQueryResponse.Result)
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // repeated string sources = 2;
  for (int i = 0; i < this->sources_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sources(i).data(), this->sources(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "sources");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->sources(i), target);
  }

  // repeated .cockroach.proto.TimeSeriesDatapoint datapoints = 3;
  for (int i = 0; i < this->datapoints_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->datapoints(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cockroach.proto.TimeSeriesQueryResponse.Result)
  return target;
}

int TimeSeriesQueryResponse_Result::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

  }
  // repeated string sources = 2;
  total_size += 1 * this->sources_size();
  for (int i = 0; i < this->sources_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->sources(i));
  }

  // repeated .cockroach.proto.TimeSeriesDatapoint datapoints = 3;
  total_size += 1 * this->datapoints_size();
  for (int i = 0; i < this->datapoints_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->datapoints(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TimeSeriesQueryResponse_Result::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TimeSeriesQueryResponse_Result* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TimeSeriesQueryResponse_Result*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TimeSeriesQueryResponse_Result::MergeFrom(const TimeSeriesQueryResponse_Result& from) {
  GOOGLE_CHECK_NE(&from, this);
  sources_.MergeFrom(from.sources_);
  datapoints_.MergeFrom(from.datapoints_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TimeSeriesQueryResponse_Result::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TimeSeriesQueryResponse_Result::CopyFrom(const TimeSeriesQueryResponse_Result& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TimeSeriesQueryResponse_Result::IsInitialized() const {

  return true;
}

void TimeSeriesQueryResponse_Result::Swap(TimeSeriesQueryResponse_Result* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    sources_.Swap(&other->sources_);
    datapoints_.Swap(&other->datapoints_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TimeSeriesQueryResponse_Result::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TimeSeriesQueryResponse_Result_descriptor_;
  metadata.reflection = TimeSeriesQueryResponse_Result_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int TimeSeriesQueryResponse::kResultsFieldNumber;
#endif  // !_MSC_VER

TimeSeriesQueryResponse::TimeSeriesQueryResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cockroach.proto.TimeSeriesQueryResponse)
}

void TimeSeriesQueryResponse::InitAsDefaultInstance() {
}

TimeSeriesQueryResponse::TimeSeriesQueryResponse(const TimeSeriesQueryResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:cockroach.proto.TimeSeriesQueryResponse)
}

void TimeSeriesQueryResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TimeSeriesQueryResponse::~TimeSeriesQueryResponse() {
  // @@protoc_insertion_point(destructor:cockroach.proto.TimeSeriesQueryResponse)
  SharedDtor();
}

void TimeSeriesQueryResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TimeSeriesQueryResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TimeSeriesQueryResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TimeSeriesQueryResponse_descriptor_;
}

const TimeSeriesQueryResponse& TimeSeriesQueryResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cockroach_2fproto_2ftimeseries_2eproto();
  return *default_instance_;
}

TimeSeriesQueryResponse* TimeSeriesQueryResponse::default_instance_ = NULL;

TimeSeriesQueryResponse* TimeSeriesQueryResponse::New() const {
  return new TimeSeriesQueryResponse;
}

void TimeSeriesQueryResponse::Clear() {
  results_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TimeSeriesQueryResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cockroach.proto.TimeSeriesQueryResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .cockroach.proto.TimeSeriesQueryResponse.Result results = 1;
      case 1: {
        if (tag == 10) {
         parse_results:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_results()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_results;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cockroach.proto.TimeSeriesQueryResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cockroach.proto.TimeSeriesQueryResponse)
  return false;
#undef DO_
}

void TimeSeriesQueryResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cockroach.proto.TimeSeriesQueryResponse)
  // repeated .cockroach.proto.TimeSeriesQueryResponse.Result results = 1;
  for (int i = 0; i < this->results_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->results(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:cockroach.proto.TimeSeriesQueryResponse)
}

::google::protobuf::uint8* TimeSeriesQueryResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:cockroach.proto.TimeSeriesQueryResponse)
  // repeated .cockroach.proto.TimeSeriesQueryResponse.Result results = 1;
  for (int i = 0; i < this->results_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->results(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cockroach.proto.TimeSeriesQueryResponse)
  return target;
}

int TimeSeriesQueryResponse::ByteSize() const {
  int total_size = 0;

  // repeated .cockroach.proto.TimeSeriesQueryResponse.Result results = 1;
  total_size += 1 * this->results_size();
  for (int i = 0; i < this->results_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->results(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TimeSeriesQueryResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TimeSeriesQueryResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TimeSeriesQueryResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TimeSeriesQueryResponse::MergeFrom(const TimeSeriesQueryResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  results_.MergeFrom(from.results_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TimeSeriesQueryResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TimeSeriesQueryResponse::CopyFrom(const TimeSeriesQueryResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TimeSeriesQueryResponse::IsInitialized() const {

  return true;
}

void TimeSeriesQueryResponse::Swap(TimeSeriesQueryResponse* other) {
  if (other != this) {
    results_.Swap(&other->results_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TimeSeriesQueryResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TimeSeriesQueryResponse_descriptor_;
  metadata.reflection = TimeSeriesQueryResponse_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace cockroach

// @@protoc_insertion_point(global_scope)
