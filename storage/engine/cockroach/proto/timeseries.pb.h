// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cockroach/proto/timeseries.proto

#ifndef PROTOBUF_cockroach_2fproto_2ftimeseries_2eproto__INCLUDED
#define PROTOBUF_cockroach_2fproto_2ftimeseries_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "gogoproto/gogo.pb.h"
// @@protoc_insertion_point(includes)

namespace cockroach {
namespace proto {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_cockroach_2fproto_2ftimeseries_2eproto();
void protobuf_AssignDesc_cockroach_2fproto_2ftimeseries_2eproto();
void protobuf_ShutdownFile_cockroach_2fproto_2ftimeseries_2eproto();

class TimeSeriesDatapoint;
class TimeSeriesData;
class TimeSeriesQueryRequest;
class TimeSeriesQueryRequest_Query;
class TimeSeriesQueryResponse;
class TimeSeriesQueryResponse_Result;

// ===================================================================

class TimeSeriesDatapoint : public ::google::protobuf::Message {
 public:
  TimeSeriesDatapoint();
  virtual ~TimeSeriesDatapoint();

  TimeSeriesDatapoint(const TimeSeriesDatapoint& from);

  inline TimeSeriesDatapoint& operator=(const TimeSeriesDatapoint& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TimeSeriesDatapoint& default_instance();

  void Swap(TimeSeriesDatapoint* other);

  // implements Message ----------------------------------------------

  TimeSeriesDatapoint* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TimeSeriesDatapoint& from);
  void MergeFrom(const TimeSeriesDatapoint& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 timestamp_nanos = 1;
  inline bool has_timestamp_nanos() const;
  inline void clear_timestamp_nanos();
  static const int kTimestampNanosFieldNumber = 1;
  inline ::google::protobuf::int64 timestamp_nanos() const;
  inline void set_timestamp_nanos(::google::protobuf::int64 value);

  // optional double value = 2;
  inline bool has_value() const;
  inline void clear_value();
  static const int kValueFieldNumber = 2;
  inline double value() const;
  inline void set_value(double value);

  // @@protoc_insertion_point(class_scope:cockroach.proto.TimeSeriesDatapoint)
 private:
  inline void set_has_timestamp_nanos();
  inline void clear_has_timestamp_nanos();
  inline void set_has_value();
  inline void clear_has_value();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int64 timestamp_nanos_;
  double value_;
  friend void  protobuf_AddDesc_cockroach_2fproto_2ftimeseries_2eproto();
  friend void protobuf_AssignDesc_cockroach_2fproto_2ftimeseries_2eproto();
  friend void protobuf_ShutdownFile_cockroach_2fproto_2ftimeseries_2eproto();

  void InitAsDefaultInstance();
  static TimeSeriesDatapoint* default_instance_;
};
// -------------------------------------------------------------------

class TimeSeriesData : public ::google::protobuf::Message {
 public:
  TimeSeriesData();
  virtual ~TimeSeriesData();

  TimeSeriesData(const TimeSeriesData& from);

  inline TimeSeriesData& operator=(const TimeSeriesData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TimeSeriesData& default_instance();

  void Swap(TimeSeriesData* other);

  // implements Message ----------------------------------------------

  TimeSeriesData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TimeSeriesData& from);
  void MergeFrom(const TimeSeriesData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional string source = 2;
  inline bool has_source() const;
  inline void clear_source();
  static const int kSourceFieldNumber = 2;
  inline const ::std::string& source() const;
  inline void set_source(const ::std::string& value);
  inline void set_source(const char* value);
  inline void set_source(const char* value, size_t size);
  inline ::std::string* mutable_source();
  inline ::std::string* release_source();
  inline void set_allocated_source(::std::string* source);

  // repeated .cockroach.proto.TimeSeriesDatapoint datapoints = 3;
  inline int datapoints_size() const;
  inline void clear_datapoints();
  static const int kDatapointsFieldNumber = 3;
  inline const ::cockroach::proto::TimeSeriesDatapoint& datapoints(int index) const;
  inline ::cockroach::proto::TimeSeriesDatapoint* mutable_datapoints(int index);
  inline ::cockroach::proto::TimeSeriesDatapoint* add_datapoints();
  inline const ::google::protobuf::RepeatedPtrField< ::cockroach::proto::TimeSeriesDatapoint >&
      datapoints() const;
  inline ::google::protobuf::RepeatedPtrField< ::cockroach::proto::TimeSeriesDatapoint >*
      mutable_datapoints();

  // @@protoc_insertion_point(class_scope:cockroach.proto.TimeSeriesData)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_source();
  inline void clear_has_source();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* name_;
  ::std::string* source_;
  ::google::protobuf::RepeatedPtrField< ::cockroach::proto::TimeSeriesDatapoint > datapoints_;
  friend void  protobuf_AddDesc_cockroach_2fproto_2ftimeseries_2eproto();
  friend void protobuf_AssignDesc_cockroach_2fproto_2ftimeseries_2eproto();
  friend void protobuf_ShutdownFile_cockroach_2fproto_2ftimeseries_2eproto();

  void InitAsDefaultInstance();
  static TimeSeriesData* default_instance_;
};
// -------------------------------------------------------------------

class TimeSeriesQueryRequest_Query : public ::google::protobuf::Message {
 public:
  TimeSeriesQueryRequest_Query();
  virtual ~TimeSeriesQueryRequest_Query();

  TimeSeriesQueryRequest_Query(const TimeSeriesQueryRequest_Query& from);

  inline TimeSeriesQueryRequest_Query& operator=(const TimeSeriesQueryRequest_Query& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TimeSeriesQueryRequest_Query& default_instance();

  void Swap(TimeSeriesQueryRequest_Query* other);

  // implements Message ----------------------------------------------

  TimeSeriesQueryRequest_Query* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TimeSeriesQueryRequest_Query& from);
  void MergeFrom(const TimeSeriesQueryRequest_Query& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // @@protoc_insertion_point(class_scope:cockroach.proto.TimeSeriesQueryRequest.Query)
 private:
  inline void set_has_name();
  inline void clear_has_name();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* name_;
  friend void  protobuf_AddDesc_cockroach_2fproto_2ftimeseries_2eproto();
  friend void protobuf_AssignDesc_cockroach_2fproto_2ftimeseries_2eproto();
  friend void protobuf_ShutdownFile_cockroach_2fproto_2ftimeseries_2eproto();

  void InitAsDefaultInstance();
  static TimeSeriesQueryRequest_Query* default_instance_;
};
// -------------------------------------------------------------------

class TimeSeriesQueryRequest : public ::google::protobuf::Message {
 public:
  TimeSeriesQueryRequest();
  virtual ~TimeSeriesQueryRequest();

  TimeSeriesQueryRequest(const TimeSeriesQueryRequest& from);

  inline TimeSeriesQueryRequest& operator=(const TimeSeriesQueryRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TimeSeriesQueryRequest& default_instance();

  void Swap(TimeSeriesQueryRequest* other);

  // implements Message ----------------------------------------------

  TimeSeriesQueryRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TimeSeriesQueryRequest& from);
  void MergeFrom(const TimeSeriesQueryRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef TimeSeriesQueryRequest_Query Query;

  // accessors -------------------------------------------------------

  // optional int64 start_nanos = 1;
  inline bool has_start_nanos() const;
  inline void clear_start_nanos();
  static const int kStartNanosFieldNumber = 1;
  inline ::google::protobuf::int64 start_nanos() const;
  inline void set_start_nanos(::google::protobuf::int64 value);

  // optional int64 end_nanos = 2;
  inline bool has_end_nanos() const;
  inline void clear_end_nanos();
  static const int kEndNanosFieldNumber = 2;
  inline ::google::protobuf::int64 end_nanos() const;
  inline void set_end_nanos(::google::protobuf::int64 value);

  // repeated .cockroach.proto.TimeSeriesQueryRequest.Query queries = 3;
  inline int queries_size() const;
  inline void clear_queries();
  static const int kQueriesFieldNumber = 3;
  inline const ::cockroach::proto::TimeSeriesQueryRequest_Query& queries(int index) const;
  inline ::cockroach::proto::TimeSeriesQueryRequest_Query* mutable_queries(int index);
  inline ::cockroach::proto::TimeSeriesQueryRequest_Query* add_queries();
  inline const ::google::protobuf::RepeatedPtrField< ::cockroach::proto::TimeSeriesQueryRequest_Query >&
      queries() const;
  inline ::google::protobuf::RepeatedPtrField< ::cockroach::proto::TimeSeriesQueryRequest_Query >*
      mutable_queries();

  // @@protoc_insertion_point(class_scope:cockroach.proto.TimeSeriesQueryRequest)
 private:
  inline void set_has_start_nanos();
  inline void clear_has_start_nanos();
  inline void set_has_end_nanos();
  inline void clear_has_end_nanos();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int64 start_nanos_;
  ::google::protobuf::int64 end_nanos_;
  ::google::protobuf::RepeatedPtrField< ::cockroach::proto::TimeSeriesQueryRequest_Query > queries_;
  friend void  protobuf_AddDesc_cockroach_2fproto_2ftimeseries_2eproto();
  friend void protobuf_AssignDesc_cockroach_2fproto_2ftimeseries_2eproto();
  friend void protobuf_ShutdownFile_cockroach_2fproto_2ftimeseries_2eproto();

  void InitAsDefaultInstance();
  static TimeSeriesQueryRequest* default_instance_;
};
// -------------------------------------------------------------------

class TimeSeriesQueryResponse_Result : public ::google::protobuf::Message {
 public:
  TimeSeriesQueryResponse_Result();
  virtual ~TimeSeriesQueryResponse_Result();

  TimeSeriesQueryResponse_Result(const TimeSeriesQueryResponse_Result& from);

  inline TimeSeriesQueryResponse_Result& operator=(const TimeSeriesQueryResponse_Result& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TimeSeriesQueryResponse_Result& default_instance();

  void Swap(TimeSeriesQueryResponse_Result* other);

  // implements Message ----------------------------------------------

  TimeSeriesQueryResponse_Result* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TimeSeriesQueryResponse_Result& from);
  void MergeFrom(const TimeSeriesQueryResponse_Result& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // repeated string sources = 2;
  inline int sources_size() const;
  inline void clear_sources();
  static const int kSourcesFieldNumber = 2;
  inline const ::std::string& sources(int index) const;
  inline ::std::string* mutable_sources(int index);
  inline void set_sources(int index, const ::std::string& value);
  inline void set_sources(int index, const char* value);
  inline void set_sources(int index, const char* value, size_t size);
  inline ::std::string* add_sources();
  inline void add_sources(const ::std::string& value);
  inline void add_sources(const char* value);
  inline void add_sources(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& sources() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_sources();

  // repeated .cockroach.proto.TimeSeriesDatapoint datapoints = 3;
  inline int datapoints_size() const;
  inline void clear_datapoints();
  static const int kDatapointsFieldNumber = 3;
  inline const ::cockroach::proto::TimeSeriesDatapoint& datapoints(int index) const;
  inline ::cockroach::proto::TimeSeriesDatapoint* mutable_datapoints(int index);
  inline ::cockroach::proto::TimeSeriesDatapoint* add_datapoints();
  inline const ::google::protobuf::RepeatedPtrField< ::cockroach::proto::TimeSeriesDatapoint >&
      datapoints() const;
  inline ::google::protobuf::RepeatedPtrField< ::cockroach::proto::TimeSeriesDatapoint >*
      mutable_datapoints();

  // @@protoc_insertion_point(class_scope:cockroach.proto.TimeSeriesQueryResponse.Result)
 private:
  inline void set_has_name();
  inline void clear_has_name();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* name_;
  ::google::protobuf::RepeatedPtrField< ::std::string> sources_;
  ::google::protobuf::RepeatedPtrField< ::cockroach::proto::TimeSeriesDatapoint > datapoints_;
  friend void  protobuf_AddDesc_cockroach_2fproto_2ftimeseries_2eproto();
  friend void protobuf_AssignDesc_cockroach_2fproto_2ftimeseries_2eproto();
  friend void protobuf_ShutdownFile_cockroach_2fproto_2ftimeseries_2eproto();

  void InitAsDefaultInstance();
  static TimeSeriesQueryResponse_Result* default_instance_;
};
// -------------------------------------------------------------------

class TimeSeriesQueryResponse : public ::google::protobuf::Message {
 public:
  TimeSeriesQueryResponse();
  virtual ~TimeSeriesQueryResponse();

  TimeSeriesQueryResponse(const TimeSeriesQueryResponse& from);

  inline TimeSeriesQueryResponse& operator=(const TimeSeriesQueryResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TimeSeriesQueryResponse& default_instance();

  void Swap(TimeSeriesQueryResponse* other);

  // implements Message ----------------------------------------------

  TimeSeriesQueryResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TimeSeriesQueryResponse& from);
  void MergeFrom(const TimeSeriesQueryResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef TimeSeriesQueryResponse_Result Result;

  // accessors -------------------------------------------------------

  // repeated .cockroach.proto.TimeSeriesQueryResponse.Result results = 1;
  inline int results_size() const;
  inline void clear_results();
  static const int kResultsFieldNumber = 1;
  inline const ::cockroach::proto::TimeSeriesQueryResponse_Result& results(int index) const;
  inline ::cockroach::proto::TimeSeriesQueryResponse_Result* mutable_results(int index);
  inline ::cockroach::proto::TimeSeriesQueryResponse_Result* add_results();
  inline const ::google::protobuf::RepeatedPtrField< ::cockroach::proto::TimeSeriesQueryResponse_Result >&
      results() const;
  inline ::google::protobuf::RepeatedPtrField< ::cockroach::proto::TimeSeriesQueryResponse_Result >*
      mutable_results();

  // @@protoc_insertion_point(class_scope:cockroach.proto.TimeSeriesQueryResponse)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::cockroach::proto::TimeSeriesQueryResponse_Result > results_;
  friend void  protobuf_AddDesc_cockroach_2fproto_2ftimeseries_2eproto();
  friend void protobuf_AssignDesc_cockroach_2fproto_2ftimeseries_2eproto();
  friend void protobuf_ShutdownFile_cockroach_2fproto_2ftimeseries_2eproto();

  void InitAsDefaultInstance();
  static TimeSeriesQueryResponse* default_instance_;
};
// ===================================================================


// ===================================================================

// TimeSeriesDatapoint

// optional int64 timestamp_nanos = 1;
inline bool TimeSeriesDatapoint::has_timestamp_nanos() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TimeSeriesDatapoint::set_has_timestamp_nanos() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TimeSeriesDatapoint::clear_has_timestamp_nanos() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TimeSeriesDatapoint::clear_timestamp_nanos() {
  timestamp_nanos_ = GOOGLE_LONGLONG(0);
  clear_has_timestamp_nanos();
}
inline ::google::protobuf::int64 TimeSeriesDatapoint::timestamp_nanos() const {
  // @@protoc_insertion_point(field_get:cockroach.proto.TimeSeriesDatapoint.timestamp_nanos)
  return timestamp_nanos_;
}
inline void TimeSeriesDatapoint::set_timestamp_nanos(::google::protobuf::int64 value) {
  set_has_timestamp_nanos();
  timestamp_nanos_ = value;
  // @@protoc_insertion_point(field_set:cockroach.proto.TimeSeriesDatapoint.timestamp_nanos)
}

// optional double value = 2;
inline bool TimeSeriesDatapoint::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TimeSeriesDatapoint::set_has_value() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TimeSeriesDatapoint::clear_has_value() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TimeSeriesDatapoint::clear_value() {
  value_ = 0;
  clear_has_value();
}
inline double TimeSeriesDatapoint::value() const {
  // @@protoc_insertion_point(field_get:cockroach.proto.TimeSeriesDatapoint.value)
  return value_;
}
inline void TimeSeriesDatapoint::set_value(double value) {
  set_has_value();
  value_ = value;
  // @@protoc_insertion_point(field_set:cockroach.proto.TimeSeriesDatapoint.value)
}

// -------------------------------------------------------------------

// TimeSeriesData

// optional string name = 1;
inline bool TimeSeriesData::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TimeSeriesData::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TimeSeriesData::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TimeSeriesData::clear_name() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& TimeSeriesData::name() const {
  // @@protoc_insertion_point(field_get:cockroach.proto.TimeSeriesData.name)
  return *name_;
}
inline void TimeSeriesData::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set:cockroach.proto.TimeSeriesData.name)
}
inline void TimeSeriesData::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set_char:cockroach.proto.TimeSeriesData.name)
}
inline void TimeSeriesData::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:cockroach.proto.TimeSeriesData.name)
}
inline ::std::string* TimeSeriesData::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.proto.TimeSeriesData.name)
  return name_;
}
inline ::std::string* TimeSeriesData::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void TimeSeriesData::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.proto.TimeSeriesData.name)
}

// optional string source = 2;
inline bool TimeSeriesData::has_source() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TimeSeriesData::set_has_source() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TimeSeriesData::clear_has_source() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TimeSeriesData::clear_source() {
  if (source_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    source_->clear();
  }
  clear_has_source();
}
inline const ::std::string& TimeSeriesData::source() const {
  // @@protoc_insertion_point(field_get:cockroach.proto.TimeSeriesData.source)
  return *source_;
}
inline void TimeSeriesData::set_source(const ::std::string& value) {
  set_has_source();
  if (source_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    source_ = new ::std::string;
  }
  source_->assign(value);
  // @@protoc_insertion_point(field_set:cockroach.proto.TimeSeriesData.source)
}
inline void TimeSeriesData::set_source(const char* value) {
  set_has_source();
  if (source_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    source_ = new ::std::string;
  }
  source_->assign(value);
  // @@protoc_insertion_point(field_set_char:cockroach.proto.TimeSeriesData.source)
}
inline void TimeSeriesData::set_source(const char* value, size_t size) {
  set_has_source();
  if (source_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    source_ = new ::std::string;
  }
  source_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:cockroach.proto.TimeSeriesData.source)
}
inline ::std::string* TimeSeriesData::mutable_source() {
  set_has_source();
  if (source_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    source_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.proto.TimeSeriesData.source)
  return source_;
}
inline ::std::string* TimeSeriesData::release_source() {
  clear_has_source();
  if (source_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = source_;
    source_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void TimeSeriesData::set_allocated_source(::std::string* source) {
  if (source_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete source_;
  }
  if (source) {
    set_has_source();
    source_ = source;
  } else {
    clear_has_source();
    source_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.proto.TimeSeriesData.source)
}

// repeated .cockroach.proto.TimeSeriesDatapoint datapoints = 3;
inline int TimeSeriesData::datapoints_size() const {
  return datapoints_.size();
}
inline void TimeSeriesData::clear_datapoints() {
  datapoints_.Clear();
}
inline const ::cockroach::proto::TimeSeriesDatapoint& TimeSeriesData::datapoints(int index) const {
  // @@protoc_insertion_point(field_get:cockroach.proto.TimeSeriesData.datapoints)
  return datapoints_.Get(index);
}
inline ::cockroach::proto::TimeSeriesDatapoint* TimeSeriesData::mutable_datapoints(int index) {
  // @@protoc_insertion_point(field_mutable:cockroach.proto.TimeSeriesData.datapoints)
  return datapoints_.Mutable(index);
}
inline ::cockroach::proto::TimeSeriesDatapoint* TimeSeriesData::add_datapoints() {
  // @@protoc_insertion_point(field_add:cockroach.proto.TimeSeriesData.datapoints)
  return datapoints_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::cockroach::proto::TimeSeriesDatapoint >&
TimeSeriesData::datapoints() const {
  // @@protoc_insertion_point(field_list:cockroach.proto.TimeSeriesData.datapoints)
  return datapoints_;
}
inline ::google::protobuf::RepeatedPtrField< ::cockroach::proto::TimeSeriesDatapoint >*
TimeSeriesData::mutable_datapoints() {
  // @@protoc_insertion_point(field_mutable_list:cockroach.proto.TimeSeriesData.datapoints)
  return &datapoints_;
}

// -------------------------------------------------------------------

// TimeSeriesQueryRequest_Query

// optional string name = 1;
inline bool TimeSeriesQueryRequest_Query::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TimeSeriesQueryRequest_Query::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TimeSeriesQueryRequest_Query::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TimeSeriesQueryRequest_Query::clear_name() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& TimeSeriesQueryRequest_Query::name() const {
  // @@protoc_insertion_point(field_get:cockroach.proto.TimeSeriesQueryRequest.Query.name)
  return *name_;
}
inline void TimeSeriesQueryRequest_Query::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set:cockroach.proto.TimeSeriesQueryRequest.Query.name)
}
inline void TimeSeriesQueryRequest_Query::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set_char:cockroach.proto.TimeSeriesQueryRequest.Query.name)
}
inline void TimeSeriesQueryRequest_Query::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:cockroach.proto.TimeSeriesQueryRequest.Query.name)
}
inline ::std::string* TimeSeriesQueryRequest_Query::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.proto.TimeSeriesQueryRequest.Query.name)
  return name_;
}
inline ::std::string* TimeSeriesQueryRequest_Query::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void TimeSeriesQueryRequest_Query::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.proto.TimeSeriesQueryRequest.Query.name)
}

// -------------------------------------------------------------------

// TimeSeriesQueryRequest

// optional int64 start_nanos = 1;
inline bool TimeSeriesQueryRequest::has_start_nanos() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TimeSeriesQueryRequest::set_has_start_nanos() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TimeSeriesQueryRequest::clear_has_start_nanos() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TimeSeriesQueryRequest::clear_start_nanos() {
  start_nanos_ = GOOGLE_LONGLONG(0);
  clear_has_start_nanos();
}
inline ::google::protobuf::int64 TimeSeriesQueryRequest::start_nanos() const {
  // @@protoc_insertion_point(field_get:cockroach.proto.TimeSeriesQueryRequest.start_nanos)
  return start_nanos_;
}
inline void TimeSeriesQueryRequest::set_start_nanos(::google::protobuf::int64 value) {
  set_has_start_nanos();
  start_nanos_ = value;
  // @@protoc_insertion_point(field_set:cockroach.proto.TimeSeriesQueryRequest.start_nanos)
}

// optional int64 end_nanos = 2;
inline bool TimeSeriesQueryRequest::has_end_nanos() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TimeSeriesQueryRequest::set_has_end_nanos() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TimeSeriesQueryRequest::clear_has_end_nanos() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TimeSeriesQueryRequest::clear_end_nanos() {
  end_nanos_ = GOOGLE_LONGLONG(0);
  clear_has_end_nanos();
}
inline ::google::protobuf::int64 TimeSeriesQueryRequest::end_nanos() const {
  // @@protoc_insertion_point(field_get:cockroach.proto.TimeSeriesQueryRequest.end_nanos)
  return end_nanos_;
}
inline void TimeSeriesQueryRequest::set_end_nanos(::google::protobuf::int64 value) {
  set_has_end_nanos();
  end_nanos_ = value;
  // @@protoc_insertion_point(field_set:cockroach.proto.TimeSeriesQueryRequest.end_nanos)
}

// repeated .cockroach.proto.TimeSeriesQueryRequest.Query queries = 3;
inline int TimeSeriesQueryRequest::queries_size() const {
  return queries_.size();
}
inline void TimeSeriesQueryRequest::clear_queries() {
  queries_.Clear();
}
inline const ::cockroach::proto::TimeSeriesQueryRequest_Query& TimeSeriesQueryRequest::queries(int index) const {
  // @@protoc_insertion_point(field_get:cockroach.proto.TimeSeriesQueryRequest.queries)
  return queries_.Get(index);
}
inline ::cockroach::proto::TimeSeriesQueryRequest_Query* TimeSeriesQueryRequest::mutable_queries(int index) {
  // @@protoc_insertion_point(field_mutable:cockroach.proto.TimeSeriesQueryRequest.queries)
  return queries_.Mutable(index);
}
inline ::cockroach::proto::TimeSeriesQueryRequest_Query* TimeSeriesQueryRequest::add_queries() {
  // @@protoc_insertion_point(field_add:cockroach.proto.TimeSeriesQueryRequest.queries)
  return queries_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::cockroach::proto::TimeSeriesQueryRequest_Query >&
TimeSeriesQueryRequest::queries() const {
  // @@protoc_insertion_point(field_list:cockroach.proto.TimeSeriesQueryRequest.queries)
  return queries_;
}
inline ::google::protobuf::RepeatedPtrField< ::cockroach::proto::TimeSeriesQueryRequest_Query >*
TimeSeriesQueryRequest::mutable_queries() {
  // @@protoc_insertion_point(field_mutable_list:cockroach.proto.TimeSeriesQueryRequest.queries)
  return &queries_;
}

// -------------------------------------------------------------------

// TimeSeriesQueryResponse_Result

// optional string name = 1;
inline bool TimeSeriesQueryResponse_Result::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TimeSeriesQueryResponse_Result::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TimeSeriesQueryResponse_Result::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TimeSeriesQueryResponse_Result::clear_name() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& TimeSeriesQueryResponse_Result::name() const {
  // @@protoc_insertion_point(field_get:cockroach.proto.TimeSeriesQueryResponse.Result.name)
  return *name_;
}
inline void TimeSeriesQueryResponse_Result::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set:cockroach.proto.TimeSeriesQueryResponse.Result.name)
}
inline void TimeSeriesQueryResponse_Result::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set_char:cockroach.proto.TimeSeriesQueryResponse.Result.name)
}
inline void TimeSeriesQueryResponse_Result::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:cockroach.proto.TimeSeriesQueryResponse.Result.name)
}
inline ::std::string* TimeSeriesQueryResponse_Result::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.proto.TimeSeriesQueryResponse.Result.name)
  return name_;
}
inline ::std::string* TimeSeriesQueryResponse_Result::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void TimeSeriesQueryResponse_Result::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.proto.TimeSeriesQueryResponse.Result.name)
}

// repeated string sources = 2;
inline int TimeSeriesQueryResponse_Result::sources_size() const {
  return sources_.size();
}
inline void TimeSeriesQueryResponse_Result::clear_sources() {
  sources_.Clear();
}
inline const ::std::string& TimeSeriesQueryResponse_Result::sources(int index) const {
  // @@protoc_insertion_point(field_get:cockroach.proto.TimeSeriesQueryResponse.Result.sources)
  return sources_.Get(index);
}
inline ::std::string* TimeSeriesQueryResponse_Result::mutable_sources(int index) {
  // @@protoc_insertion_point(field_mutable:cockroach.proto.TimeSeriesQueryResponse.Result.sources)
  return sources_.Mutable(index);
}
inline void TimeSeriesQueryResponse_Result::set_sources(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:cockroach.proto.TimeSeriesQueryResponse.Result.sources)
  sources_.Mutable(index)->assign(value);
}
inline void TimeSeriesQueryResponse_Result::set_sources(int index, const char* value) {
  sources_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:cockroach.proto.TimeSeriesQueryResponse.Result.sources)
}
inline void TimeSeriesQueryResponse_Result::set_sources(int index, const char* value, size_t size) {
  sources_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:cockroach.proto.TimeSeriesQueryResponse.Result.sources)
}
inline ::std::string* TimeSeriesQueryResponse_Result::add_sources() {
  return sources_.Add();
}
inline void TimeSeriesQueryResponse_Result::add_sources(const ::std::string& value) {
  sources_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:cockroach.proto.TimeSeriesQueryResponse.Result.sources)
}
inline void TimeSeriesQueryResponse_Result::add_sources(const char* value) {
  sources_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:cockroach.proto.TimeSeriesQueryResponse.Result.sources)
}
inline void TimeSeriesQueryResponse_Result::add_sources(const char* value, size_t size) {
  sources_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:cockroach.proto.TimeSeriesQueryResponse.Result.sources)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
TimeSeriesQueryResponse_Result::sources() const {
  // @@protoc_insertion_point(field_list:cockroach.proto.TimeSeriesQueryResponse.Result.sources)
  return sources_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
TimeSeriesQueryResponse_Result::mutable_sources() {
  // @@protoc_insertion_point(field_mutable_list:cockroach.proto.TimeSeriesQueryResponse.Result.sources)
  return &sources_;
}

// repeated .cockroach.proto.TimeSeriesDatapoint datapoints = 3;
inline int TimeSeriesQueryResponse_Result::datapoints_size() const {
  return datapoints_.size();
}
inline void TimeSeriesQueryResponse_Result::clear_datapoints() {
  datapoints_.Clear();
}
inline const ::cockroach::proto::TimeSeriesDatapoint& TimeSeriesQueryResponse_Result::datapoints(int index) const {
  // @@protoc_insertion_point(field_get:cockroach.proto.TimeSeriesQueryResponse.Result.datapoints)
  return datapoints_.Get(index);
}
inline ::cockroach::proto::TimeSeriesDatapoint* TimeSeriesQueryResponse_Result::mutable_datapoints(int index) {
  // @@protoc_insertion_point(field_mutable:cockroach.proto.TimeSeriesQueryResponse.Result.datapoints)
  return datapoints_.Mutable(index);
}
inline ::cockroach::proto::TimeSeriesDatapoint* TimeSeriesQueryResponse_Result::add_datapoints() {
  // @@protoc_insertion_point(field_add:cockroach.proto.TimeSeriesQueryResponse.Result.datapoints)
  return datapoints_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::cockroach::proto::TimeSeriesDatapoint >&
TimeSeriesQueryResponse_Result::datapoints() const {
  // @@protoc_insertion_point(field_list:cockroach.proto.TimeSeriesQueryResponse.Result.datapoints)
  return datapoints_;
}
inline ::google::protobuf::RepeatedPtrField< ::cockroach::proto::TimeSeriesDatapoint >*
TimeSeriesQueryResponse_Result::mutable_datapoints() {
  // @@protoc_insertion_point(field_mutable_list:cockroach.proto.TimeSeriesQueryResponse.Result.datapoints)
  return &datapoints_;
}

// -------------------------------------------------------------------

// TimeSeriesQueryResponse

// repeated .cockroach.proto.TimeSeriesQueryResponse.Result results = 1;
inline int TimeSeriesQueryResponse::results_size() const {
  return results_.size();
}
inline void TimeSeriesQueryResponse::clear_results() {
  results_.Clear();
}
inline const ::cockroach::proto::TimeSeriesQueryResponse_Result& TimeSeriesQueryResponse::results(int index) const {
  // @@protoc_insertion_point(field_get:cockroach.proto.TimeSeriesQueryResponse.results)
  return results_.Get(index);
}
inline ::cockroach::proto::TimeSeriesQueryResponse_Result* TimeSeriesQueryResponse::mutable_results(int index) {
  // @@protoc_insertion_point(field_mutable:cockroach.proto.TimeSeriesQueryResponse.results)
  return results_.Mutable(index);
}
inline ::cockroach::proto::TimeSeriesQueryResponse_Result* TimeSeriesQueryResponse::add_results() {
  // @@protoc_insertion_point(field_add:cockroach.proto.TimeSeriesQueryResponse.results)
  return results_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::cockroach::proto::TimeSeriesQueryResponse_Result >&
TimeSeriesQueryResponse::results() const {
  // @@protoc_insertion_point(field_list:cockroach.proto.TimeSeriesQueryResponse.results)
  return results_;
}
inline ::google::protobuf::RepeatedPtrField< ::cockroach::proto::TimeSeriesQueryResponse_Result >*
TimeSeriesQueryResponse::mutable_results() {
  // @@protoc_insertion_point(field_mutable_list:cockroach.proto.TimeSeriesQueryResponse.results)
  return &results_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace cockroach

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_cockroach_2fproto_2ftimeseries_2eproto__INCLUDED
